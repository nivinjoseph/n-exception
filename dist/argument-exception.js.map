{"version":3,"file":"argument-exception.js","sourceRoot":"","sources":["../src/argument-exception.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,yCAAoC;AACpC,iBAAe;AAEf;IAAgC,qCAAS;IAIrC,2BAAmB,OAAe,EAAE,MAAc,EAAE,cAA0B;QAA9E,iBAWC;QATG,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,IAAI,OAAO,CAAC,mBAAmB,EAAE,CAAC;YACjD,OAAO,GAAG,WAAW,CAAC;QAE1B,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,IAAI,MAAM,CAAC,mBAAmB,EAAE,CAAC;YAC/C,MAAM,GAAG,cAAc,CAAC;QAE5B,IAAM,OAAO,GAAG,qBAAqB,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAE9D,QAAA,kBAAM,OAAO,EAAE,cAAc,CAAC,SAAC;;IACnC,CAAC;IACL,wBAAC;AAAD,CAAC,AAhBD,CAAgC,mBAAS,GAgBxC;AAED,kBAAe,iBAAiB,CAAC","sourcesContent":["import Exception from \"./exception\";\nimport \"n-ext\";\n\nclass ArgumentException extends Exception\n{\n    public constructor(argName: string, reason: string);\n    public constructor(argName: string, reason: string, innerException: Exception);\n    public constructor(argName: string, reason: string, innerException?: Exception)\n    {\n        if (argName == null || argName.isEmptyOrWhiteSpace())\n            argName = \"<UNKNOWN>\";\n\n        if (reason == null || reason.isEmptyOrWhiteSpace())\n            reason = \"is not valid\";\n        \n        const message = \"Argument '{0}' {1}.\".format(argName, reason);\n\n        super(message, innerException);\n    }\n}\n\nexport default ArgumentException;"]}