{"version":3,"file":"invalid-operation-exception.js","sourceRoot":"","sources":["../src/invalid-operation-exception.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,yCAAwC;AACxC,iBAAe;AAEf;IAA+C,6CAAS;IAUpD,mCAAmB,SAAiB,EAAE,cAA0B;QAAhE,iBAUC;QARG,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,IAAI,SAAS,CAAC,mBAAmB,EAAE,CAAC;YACrD,SAAS,GAAG,WAAW,CAAC;QAE5B,IAAM,OAAO,GAAG,6BAA6B,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAEhE,QAAA,kBAAM,OAAO,EAAE,cAAc,CAAC,SAAC;QAE/B,KAAI,CAAC,UAAU,GAAG,SAAS,CAAC;;IAChC,CAAC;IAfD,sBAAW,gDAAS;aAApB,cAAiC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;;;OAAA;IAgB9D,gCAAC;AAAD,CAAC,AArBD,CAA+C,qBAAS,GAqBvD;AArBY,8DAAyB","sourcesContent":["import { Exception } from \"./exception\";\nimport \"n-ext\";\n\nexport class InvalidOperationException extends Exception\n{\n    private readonly _operation: string;\n    \n    \n    public get operation(): string { return this._operation; }\n    \n    \n    public constructor(operation: string);\n    public constructor(operation: string, innerException: Exception);\n    public constructor(operation: string, innerException?: Exception)\n    {\n        if (operation == null || operation.isEmptyOrWhiteSpace())\n            operation = \"<UNKNOWN>\";\n\n        const message = \"Operation '{0}' is invalid.\".format(operation);\n\n        super(message, innerException);\n        \n        this._operation = operation;\n    }\n}"]}