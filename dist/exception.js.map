{"version":3,"file":"exception.js","sourceRoot":"","sources":["../src/exception.ts"],"names":[],"mappings":"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","sourcesContent":["import \"n-ext\";\n\nexport class Exception\n{\n    private readonly _name: string;\n    private readonly _message: string;\n    private readonly _stack: string;\n    private readonly _innerException: Exception;\n    \n    \n    public get name(): string { return this._name; }\n    public get message(): string { return this._message; }\n    public get stack(): string { return this._stack; }\n    public get innerException(): Exception { return this._innerException; }\n    \n    \n    public constructor(message: string);\n    public constructor(message: string, innerException: Exception);\n    public constructor(message: string, innerException?: Exception)\n    {\n        this._name = (<Object>this).getTypeName();\n        \n        if ((<any>message) instanceof Error)\n        {\n            let err = (<any>message) as Error;\n            this._message = err.message;\n            this._stack = err.stack;\n        }\n        else\n        {\n            if (message == null || message.isEmptyOrWhiteSpace())\n                message = \"<none>\";\n\n            this._message = message;\n            this._stack = this.generateStackTrace();\n            this._innerException = innerException ? innerException : null;\n        }\n    }\n    \n    public static fromError(error: Error): Exception\n    {\n        return new Exception(error as any);\n    }\n    \n    public toString(): string\n    {\n        return \"{0}: {1}\".format(this._name, this._message);\n    }\n    \n    public toLogString(): string\n    {\n        let log = this.stack;\n        if (this.innerException != null)\n            log = log + \"\\n\" + \"Inner Exception --> \" + this.innerException.toLogString();\n        \n        return log;\n    }\n    \n    \n    private generateStackTrace(): string\n    {\n        let err = new Error();\n        let splitted = err.stack.split(/\\r?\\n/g);\n        let mark = \"at new {0}\".format(this.name);\n        let index = null;\n        for (let i = 0; i < splitted.length; i++)\n        {\n            if (splitted[i].trim().startsWith(mark))\n            {\n                index = i + 1;\n                break;\n            }\n        }\n        splitted = index != null ? splitted.skip(index) : splitted.skip(1);\n        splitted = [this.toString()].concat(splitted);\n        return splitted.join(\"\\n\");\n    }\n}"]}